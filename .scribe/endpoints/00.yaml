name: Autenticação
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      groupName: Autenticação
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Registrar novo usuário'
      description: 'Registra um novo usuário na aplicação.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Nome completo do usuário.'
        required: true
        example: 'João Silva'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'E-mail válido e único.'
        required: true
        example: joao@email.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Senha de acesso.'
        required: true
        example: segredo123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'João Silva'
      email: joao@email.com
      password: segredo123
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "message": "Usuário registrado com sucesso!",
            "id": 1,
            "name": "João Silva",
            "email": "joao2@email.com"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Validation failed.",
            "errors": {
              "email": [
                "The email has already been taken."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: Autenticação
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Login do usuário'
      description: 'Realiza o login de um usuário com e-mail e senha. Retorna um token JWT válido para autenticação.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'E-mail do usuário.'
        required: true
        example: joao@email.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Senha do usuário.'
        required: true
        example: segredo123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: joao@email.com
      password: segredo123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Authenticated!",
            "token": "--bearer-token--"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "error": "Invalid credentials"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/me
    metadata:
      groupName: Autenticação
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Obter dados do usuário autenticado'
      description: 'Retorna as informações do usuário atualmente autenticado com base no token JWT.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Authenticated!",
            "data": {
              "id": 3,
              "name": "João Silva",
              "email": "joao@email.com"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Attempt to read property \"id\" on null",
            "exception": "ErrorException"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/logout
    metadata:
      groupName: Autenticação
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logout do usuário'
      description: 'Invalida o token JWT atual, encerrando a sessão do usuário autenticado.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Successfully logged out"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/refresh
    metadata:
      groupName: Autenticação
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Renovar token JWT'
      description: 'Gera um novo token JWT com base no token atual válido.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Successfully refreshed!",
            "token": "--bearer-token"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "The token has been blacklisted",
            "exception": "Tymon\\JWTAuth\\Exceptions\\TokenBlacklistedException"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
